EccMainView_tabGeneralText=Fehlerkorrekturcodes
EccMainView_tabHammingText=Hamming Code McEliece
EccMainView_tabMcElieceText=McEliece Cryptosystem
GeneralEccView_btnNextStep=Weiter
GeneralEccView_btnPrev=Zur\u00fcck
GeneralEccView_btnReset=Reset
GeneralEccView_grpErrorCode=Fehlerhafte Daten\u00fcbertragung
GeneralEccView_grpReceiver=Empf\u00e4nger
GeneralEccView_grpSenderStep=Absender
GeneralEccView_grpTextInfo=Informationen
GeneralEccView_lblHeader=Fehlerkorrekturcode
GeneralEccView_lblTextDecoded=dekodieren
GeneralEccView_lblTextEncode=kodieren
GeneralEccView_lblTextOriginal=Original:
GeneralEccView_textHeader=Diese Visualisierung zeigt wie einzelne Bit-Fehler bei der Daten\u00fcbertragung \u00fcber einen verrauschten Kanal mit einem Fehlerkorrekturcode gefunden und korrigiert werden. Lineare Codes dieser Art k\u00f6nnen zur Verschl\u00fcsselung eingesetzt werden, beispielsweise mit dem McEliece oder Niederreiter Verfahren, welche Kandidaten f\u00fcr Post Quantum Kryptographie sind.\n\nKlicken Sie auf \u0022Weiter\u0022 um fortzufahren.
GeneralEccView_textInfo_step1=Der Eingabe Text wird als ASCII kodierter Bitset behandelt. 
GeneralEccView_textInfo_step2=Der Absener kodiert die Daten entsprechend des gew\u00e4hlten Schemas. In diesem Beispiel wurde Hamming code benutzt, welcher jeweils 4 Daten Bits mit 3 Bits zur Pr\u00fcfung der Parit\u00e4t erg\u00e4nzt.
GeneralEccView_textInfo_step3=Bei der Daten\u00fcbertragung kommt es zu einem Fehler. Hier wurde in den Codew\u00f6rtern jeweils ein Bit gekippt (markierung).
GeneralEccView_textInfo_step4=Der Empf\u00e4nger pr\u00e4fcft auf Fehler indem er das Fehler-Syndrom des jeweiligen Blocks errechnet, die bei einem einzelnen gekippten Bit auch der Position entsprechen. Die fehlerhaften Bits werden erkannt und die richtigen Codeworte wiederhergesetellt.
HammingCryptoView_lblHeader=Hamming Code McEliece
HammingCryptoView_btnGeneratePrivateKey=Generieren
HammingCryptoView_grpEncryption=Bob
HammingCryptoView_grpDecryption=Alice
HammingCryptoView_grpPrivateKey=Private Key
HammingCryptoView_grpPublicKey=Public Key
HammingCryptoView_grpTextInfo=Informationen
HammingCryptoView_lblEncrypt=Verschl\u00fcsselte Bits
HammingCryptoView_lblOutput=Entschl\u00fcsselte Bits
HammingCryptoView_lblTextOriginal=Klartext (hex)
HammingCryptoView_textHeader=Diese Ansicht stellt ein vereinfachtes McEliece System mit Hamming Kodierung dar. Es ist kryptographisch nicht sicher, da die Kodierung immer gleich und nur ein einzelner Fehler pro Segment korrigiert werden kann. Im Gegensatz dazu haben Goppa Codes ein Zufallselement, da zur generierung ein zuf\u00e4lliges Polynom in einem begrenzten Galoisfeld gew\u00e4hlt werden kann. Je nach L\u00e4nge der Code Worte kann Goppa auch eine Vielzahl von Fehlern korrigieren. Allerdings ist die Arbeitsweise des zugrunde liegenden Algorithmus auf diese Weise nachvollziehbarer.\n\nDie Nachricht und Schl\u00fcssel Parameter k\u00f6nnen im ersten Schritt angepasst werden. Zum fortfahren klicken Sie auf "Weiter".
HammingCryptoView_step1=Die Parameter k\u00f6nnen nun ver\u00e4ndert werden. Alternativ klicken Sie auf "Generieren" um mit Zufallswerten zu f\u00fcllen.
HammingCryptoView_step2=Bob f\u00fchrt die folgenden Schritte aus, um die Nachricht zu verschl\u00fcsseln:\n1. Bob enkodiert die Nachricht m als Bin\u00e4rstring der L\u00e4nge n.\n2. Er berechnet c' durch Multiplikation von m mit dem Public key G' = S*G*P\n3. Er generiert einen zuf\u00e4lligen Vektor e mit n Bits, welcher genau t Fehler enth\u00e4lt. Dies wird durch die Anzahl der Fehler, die der Code korrigieren kann, bestimmt (in diesem Beispiel 1)\n4. Der Geheimtext berechnet sich aus c = C' + e.
HammingCryptoView_step3=Bei erhalt einer kodierten Nachricht entschl\u00fcsselt Alice diese wie folgt:\n1. Alice multipliziert den Geheimtext c' mit dem inversen der Permutations-Matrix P.\n2. Sie nutzt den Dekodierungsalgorithmus um die Fehler in c' zu korrigieren.\n3. Sie stellt die urspr\u00fcngliche Nachricht wieder her, indem sie m' mit dem Inversen von S multipliziert.
McElieceView_lblHeader=McEliece Cryptosystem
McElieceView_textHeader=Das McEliece Kryptographie System ist ein asymmetrischer Verschl\u00fcsselungs-Algorithmus der auf linearen Fehlerkorrekturcodes aufbaut. Es wurde 1978 von Robert McEliece entwickelt und fand zun\u00e4chst wegen seinen Nachteilen gegen\u00fcber RSA kaum Beachtung. Erst durch die Anforderungen der "Post Quantum Cryptography" wurde der es als Kandidat f\u00fcr die NIST Standardisierung angemeldet. Die kryptographische Sicherheit des Algorithmus beruht auf der Schwierigkeit einen generellen linearen Code zu dekodieren.\nDas urspr\u00fcngliche Design nutzt bin\u00e4re Goppa codes, welche durch Patterson's Algorithmus effizient dekodiert werden k\u00f6nnen, sofern die Generator- oder Parit\u00e4tsmatrix bekannt ist. Der Private Schl\u00fcssel besteht aus der Generatormatrix, sowie zwei matrizen S (scramble) und P (permutation) um den Goppa code zu verschleiern. Der \u00f6ffentlichen Schl\u00fcssel besteht aus dem Produkt dieser Matrizen, welches nicht einfach zur\u00fcckgerechnet werden kann, und der maximalen Anzahl von Bit-Fehlern.\n\nSie k\u00f6nnen die Schl\u00fcssel Parameter selbst bestimmen oder durch einen Klick auf "generieren" von der Applikation ausf\u00fcllen lassen und die Nachrichten durch die jeweiligen Kontrollelemente verschl\u00fcsseln und entschl\u00fcsseln.
