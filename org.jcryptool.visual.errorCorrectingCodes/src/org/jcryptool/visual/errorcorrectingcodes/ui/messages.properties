EccMainView_tabGeneralText=Error Correcting Codes
EccMainView_tabMcElieceText=Cryptographic System
GeneralEccView_btnNextStep=Next Step
GeneralEccView_btnPrev=Previous Step
GeneralEccView_btnReset=Reset
GeneralEccView_grpErrorCode=Erroneous data transmission
GeneralEccView_grpReceiver=Receiver
GeneralEccView_grpSenderStep=Sender
GeneralEccView_grpTextInfo=Information
GeneralEccView_lblHeader=Error Correcting Codes
GeneralEccView_lblTextDecoded=decode
GeneralEccView_lblTextEncode=encode
GeneralEccView_lblTextOriginal=Original:
GeneralEccView_textInfo_step1=This visual shows the general process of finding and correcting bit errors in data transmissions over a noisy channel using error-correcting codes. Using random linear codes, they can be used in Code-based cryptographic systems, for example McEliece or Niederreiter scheme, which are candidates for post quantum cryptography.\n\nClick on the "next step" button to continue.
GeneralEccView_textInfo_step2=The sender encodes the data according to the selected coding scheme. In this example Hamming code was used, which adds 3 parity check bits to every 4 bits of data. 
GeneralEccView_textInfo_step3=An error gets introduced in the data transmission. Here a single bit in each codeword is flipped (marked in red).
GeneralEccView_textInfo_step4=The receiving end checks for errors by calculating the error syndrome, which also identifies the position of the bit in error. The erroneous bits are detected and flipped to reproduce the correct codewords.
GeneralEccView_textInfo_step5=Lastly the string is decoded by extracting the data bits.
McElieceView_btnGeneratePrivateKey=Generate Key
McElieceView_demoNote=demonstration purposes
McElieceView_grpEncryption=Bob
McElieceView_grpErrorCode=Erroneous data transmission
McElieceView_grpDecryption=Alice
McElieceView_grpDecryptStep=Decryption
McElieceView_grpPrivateKey=Private Key
McElieceView_grpPublicKey=Public Key
McElieceView_grpTextInfo=Information
McElieceView_lblClearText=Clear text
McElieceView_lblCorrected=Corrected bits
McElieceView_lblEncrypt=Encrypted Bitstring
McElieceView_lblHeader=McEliece Cryptosystem
McElieceView_lblOutput=Decrypted bitstring
McElieceView_lblTextOriginal=Original
McElieceView_step1=The McEliece cryptosystem is an asymmetric encryption algorithm that uses random linear codes. It was developed in 1978 by Robert McEliece and not considered for mainstream cryptography until it was proposed as a candidate for "post-quantum cryptography". The algorithms security is based on the hardness of decoding a general linear code. The private key is described by an error correcing code for which an efficient decoding algorithm is known.\n\nThe original algorithm uses binary Goppa codes, which can be efficienty decoded by use of Patterson's algorithm. On the other hand, the keys and the encrypted string are much larger than those of "conventional" asymmetric encryption schemes. For demonstration purposes, we used Hamming (7,4) code, which can only correct a single error, but has much smaller key sizes.\nAlice holds the private key, which is the generator matrix of  Hamming (7,4) and two matrices S (scramble) and P (permutate) to disguise it.\nYou can enter binary values or let the program fill the data by clicking on "Generate key".
McElieceView_step2=To encrypt the data, Bob performs the following steps:\n1. Bob encodes the message m as a binary string of length n.\n2. Bob computes the vector c' by multiplieing m with the public key G' = S*G*P\n3. Bob generates a random n-bit vector e containing exactly t errors, which is determined by the number of errors the code can correct.\n4. Bob computes the ciphertext as c = C' + e.
McElieceView_step3=Upon receiving an encrypted message, Alice deciphers it by following these steps:\n1. Alice multiplies the ciphertext c' with the inverse of the permutation matrix P.\n2. Alice uses the decoding algorithm to correct the errors in c'.\n3. Alice recovers the original message by multyplying m' with the inverse of S.
